defmodule Stripe.InvoiceRenderingTemplate do
  use Stripe.Entity

  @moduledoc "Invoice Rendering Templates are used to configure how invoices are rendered on surfaces like the PDF. Invoice Rendering Templates\ncan be created from within the Dashboard, and they can be used over the API when creating invoices."
  (
    defstruct [:created, :id, :livemode, :metadata, :nickname, :object, :status, :version]

    @typedoc "The `invoice_rendering_template` type.\n\n  * `created` Time at which the object was created. Measured in seconds since the Unix epoch.\n  * `id` Unique identifier for the object.\n  * `livemode` Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n  * `metadata` Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n  * `nickname` A brief description of the template, hidden from customers\n  * `object` String representing the object's type. Objects of the same type share the same value.\n  * `status` The status of the template, one of `active` or `archived`.\n  * `version` Version of this template; version increases by one when an update on the template changes any field that controls invoice rendering\n"
    @type t :: %__MODULE__{
            created: integer,
            id: binary,
            livemode: boolean,
            metadata: term | nil,
            nickname: binary | nil,
            object: binary,
            status: binary,
            version: integer
          }
  )

  (
    nil

    @doc "<p>List all templates, ordered by creation date, with the most recently created template appearing first.</p>\n\n#### Details\n\n * Method: `get`\n * Path: `/v1/invoice_rendering_templates`\n"
    (
      @spec list(
              params :: %{
                optional(:ending_before) => binary,
                optional(:expand) => list(binary),
                optional(:limit) => integer,
                optional(:starting_after) => binary,
                optional(:status) => :active | :archived
              },
              opts :: Keyword.t()
            ) ::
              {:ok, Stripe.List.t(Stripe.InvoiceRenderingTemplate.t())}
              | {:error, Stripe.ApiErrors.t()}
              | {:error, term()}
      def list(params \\ %{}, opts \\ []) do
        path = Stripe.OpenApi.Path.replace_path_params("/v1/invoice_rendering_templates", [], [])

        Stripe.Request.new_request(opts)
        |> Stripe.Request.put_endpoint(path)
        |> Stripe.Request.put_params(params)
        |> Stripe.Request.put_method(:get)
        |> Stripe.Request.make_request()
      end
    )
  )

  (
    nil

    @doc "<p>Retrieves an invoice rendering template with the given ID. It by default returns the latest version of the template. Optionally, specify a version to see previous versions.</p>\n\n#### Details\n\n * Method: `get`\n * Path: `/v1/invoice_rendering_templates/{template}`\n"
    (
      @spec retrieve(
              template :: binary(),
              params :: %{optional(:expand) => list(binary), optional(:version) => integer},
              opts :: Keyword.t()
            ) ::
              {:ok, Stripe.InvoiceRenderingTemplate.t()}
              | {:error, Stripe.ApiErrors.t()}
              | {:error, term()}
      def retrieve(template, params \\ %{}, opts \\ []) do
        path =
          Stripe.OpenApi.Path.replace_path_params(
            "/v1/invoice_rendering_templates/{template}",
            [
              %OpenApiGen.Blueprint.Parameter{
                in: "path",
                name: "template",
                required: true,
                schema: %OpenApiGen.Blueprint.Parameter.Schema{
                  name: "template",
                  title: nil,
                  type: "string",
                  items: [],
                  properties: [],
                  any_of: []
                }
              }
            ],
            [template]
          )

        Stripe.Request.new_request(opts)
        |> Stripe.Request.put_endpoint(path)
        |> Stripe.Request.put_params(params)
        |> Stripe.Request.put_method(:get)
        |> Stripe.Request.make_request()
      end
    )
  )

  (
    nil

    @doc "<p>Updates the status of an invoice rendering template to ‘archived’ so no new Stripe objects (customers, invoices, etc.) can reference it. The template can also no longer be updated. However, if the template is already set on a Stripe object, it will continue to be applied on invoices generated by it.</p>\n\n#### Details\n\n * Method: `post`\n * Path: `/v1/invoice_rendering_templates/{template}/archive`\n"
    (
      @spec archive(
              template :: binary(),
              params :: %{optional(:expand) => list(binary)},
              opts :: Keyword.t()
            ) ::
              {:ok, Stripe.InvoiceRenderingTemplate.t()}
              | {:error, Stripe.ApiErrors.t()}
              | {:error, term()}
      def archive(template, params \\ %{}, opts \\ []) do
        path =
          Stripe.OpenApi.Path.replace_path_params(
            "/v1/invoice_rendering_templates/{template}/archive",
            [
              %OpenApiGen.Blueprint.Parameter{
                in: "path",
                name: "template",
                required: true,
                schema: %OpenApiGen.Blueprint.Parameter.Schema{
                  name: "template",
                  title: nil,
                  type: "string",
                  items: [],
                  properties: [],
                  any_of: []
                }
              }
            ],
            [template]
          )

        Stripe.Request.new_request(opts)
        |> Stripe.Request.put_endpoint(path)
        |> Stripe.Request.put_params(params)
        |> Stripe.Request.put_method(:post)
        |> Stripe.Request.make_request()
      end
    )
  )

  (
    nil

    @doc "<p>Unarchive an invoice rendering template so it can be used on new Stripe objects again.</p>\n\n#### Details\n\n * Method: `post`\n * Path: `/v1/invoice_rendering_templates/{template}/unarchive`\n"
    (
      @spec unarchive(
              template :: binary(),
              params :: %{optional(:expand) => list(binary)},
              opts :: Keyword.t()
            ) ::
              {:ok, Stripe.InvoiceRenderingTemplate.t()}
              | {:error, Stripe.ApiErrors.t()}
              | {:error, term()}
      def unarchive(template, params \\ %{}, opts \\ []) do
        path =
          Stripe.OpenApi.Path.replace_path_params(
            "/v1/invoice_rendering_templates/{template}/unarchive",
            [
              %OpenApiGen.Blueprint.Parameter{
                in: "path",
                name: "template",
                required: true,
                schema: %OpenApiGen.Blueprint.Parameter.Schema{
                  name: "template",
                  title: nil,
                  type: "string",
                  items: [],
                  properties: [],
                  any_of: []
                }
              }
            ],
            [template]
          )

        Stripe.Request.new_request(opts)
        |> Stripe.Request.put_endpoint(path)
        |> Stripe.Request.put_params(params)
        |> Stripe.Request.put_method(:post)
        |> Stripe.Request.make_request()
      end
    )
  )
end
